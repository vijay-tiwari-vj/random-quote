{"version":3,"sources":["components/QuoteBox.js","App.js","serviceWorker.js","index.js"],"names":["QuoteBox","useState","JSON","parse","localStorage","getItem","quotes","setQuotes","quoteText","setQuoteText","quoteAuthor","setQuoteAuthor","getQuotes","random_quote","Math","floor","random","length","quote","author","useEffect","a","Axios","get","response","data","setItem","stringify","fetchQuotes","catch","error","console","log","id","className","href","onClick","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","message"],"mappings":"gRAmDeA,EAhDE,WAAO,IAAD,EACOC,mBAASC,KAAKC,MAAMC,aAAaC,QAAQ,YAAc,IAD9D,mBACdC,EADc,KACNC,EADM,OAEeN,mBAAS,IAFxB,mBAEbO,EAFa,KAEFC,EAFE,OAGmBR,mBAAS,IAH5B,mBAGbS,EAHa,KAGAC,EAHA,KAIfC,EAAY,WAChB,IAAMC,EAAeP,EAAOQ,KAAKC,MAAMD,KAAKE,SAAWV,EAAOW,SACxDC,EAAQL,EAAeA,EAAY,UAAgB,2CACnDM,EAASN,EAAeA,EAAY,YAAkB,2CAE5DJ,EAAaS,GACbP,EAAeQ,IAkBjB,OAfAC,qBAAU,YACS,uCAAG,8BAAAC,EAAA,4DACN,oFADM,SAEKC,IAAMC,IADjB,qFADM,cAEZC,EAFY,gBAGCA,EAASC,KAHV,OAGZA,EAHY,OAKlBrB,aAAasB,QAAQ,SAAUxB,KAAKyB,UAAUF,IAC9ClB,EAAUkB,GANQ,2CAAH,qDAQjBG,GAAcC,OAAM,SAAAC,GAClBC,QAAQC,IAAIF,MAEdlB,MACC,IAGD,yBAAKqB,GAAG,aACN,yBAAKA,GAAG,cACN,uBAAGC,UAAU,oBAAb,KACA,0BAAMD,GAAG,QAASzB,GAAaA,IAEjC,yBAAKyB,GAAG,UAAR,KACMvB,GAA4B,wCAGlC,yBAAKwB,UAAU,WACb,uBAAGD,GAAG,cAAcE,KAAK,4BAA2B,uBAAGD,UAAU,kBAAb,MAEpD,4BAAQD,GAAG,YAAYG,QAASxB,GAAhC,gBCjCOyB,MARf,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,QCMcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdzB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMyB,c","file":"static/js/main.81d92559.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport Axios from 'axios'\r\n\r\nconst QuoteBox = () => {\r\n  const [quotes, setQuotes] = useState(JSON.parse(localStorage.getItem('quotes')) || [])\r\n  const [ quoteText, setQuoteText ] = useState('')\r\n  const [ quoteAuthor, setQuoteAuthor ] = useState('')\r\n  const getQuotes = () => {\r\n    const random_quote = quotes[Math.floor(Math.random() * quotes.length)]\r\n    const quote = random_quote ? random_quote['quoteText'] : <div>Loading...</div>\r\n    const author = random_quote ? random_quote['quoteAuthor'] : <div>Loading...</div>\r\n    \r\n    setQuoteText(quote)\r\n    setQuoteAuthor(author)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const fetchQuotes = async () => {\r\n      const url = 'https://raw.githubusercontent.com/JamesFT/Database-Quotes-JSON/master/quotes.json'\r\n      const response = await Axios.get(url)\r\n      const data = await response.data\r\n      \r\n      localStorage.setItem('quotes', JSON.stringify(data))\r\n      setQuotes(data)\r\n    }\r\n    fetchQuotes().catch(error => {\r\n      console.log(error)\r\n    })\r\n    getQuotes()\r\n  }, [])\r\n\r\n  return (\r\n    <div id=\"quote-box\">\r\n      <div id=\"quote-text\">\r\n        <i className=\"fa fa-quote-left\"> </i>\r\n        <span id=\"text\">{ quoteText && quoteText }</span>\r\n      </div>\r\n      <div id=\"author\">\r\n        - { quoteAuthor ? quoteAuthor : <em>Unknown</em> }\r\n      </div>\r\n\r\n      <div className=\"buttons\">\r\n        <a id=\"tweet-quote\" href=\"twitter.com/intent/tweet\"><i className=\"fab fa-twitter\"> </i></a>\r\n        \r\n        <button id=\"new-quote\" onClick={getQuotes}>New quote</button>\r\n      </div>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default QuoteBox\r\n","import React from 'react';\nimport QuoteBox from './components/QuoteBox';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <QuoteBox />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}